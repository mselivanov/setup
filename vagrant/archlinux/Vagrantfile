# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "terrywang/archlinux"
  
  # Set hostname
  config.vm.hostname = "dev.vagrant.vm"
  config.vm.disk :disk, size: "50GB", primary: true

  # vagrant-proxyconf
  config.proxy.http     = "http://proxy-rwest-de.energy.local:8081/"
  config.proxy.https    = "http://proxy-rwest-de.energy.local:8081/"
  

  # Use vagrant-omnibus to install chef client
  # config.omnibus.chef_version = :latest

  # Enable Berkshelf via vagrant-berkshelf
  # config.berkshelf.enabled = true
  
  # vagrant-berkshelf plugin assumes that the Vagrantfile is located in the same directory as a Berksfile
  # Override this behavior if your Berksfile is located in another directory
  # config.berkshelf.berksfile_path = "/path/to/Berksfile"

  # Disable vagrant-vbguest to update VirtualBox Guest Additions
  config.vbguest.auto_update = false

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  
  # Second network interface for bridged mode
  config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  # config.vm.synced_folder ".", "/vagrant", disabled: true
  # NFS synced folder nfs_version option defaults to 3
  # config.vm.synced_folder ".", "/vagrant", type: "nfs"
  # rsync synced folder
  # config.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"

  vagrant_data = File.expand_path("../vagrant_data", __FILE__)
  Dir::mkdir(vagrant_data) unless FileTest::directory?(vagrant_data)
  config.vm.synced_folder "vagrant_data", "/vagrant_data"

  # Install Chef Client as a gem
  # config.vm.provision :shell, :inline => "gem install chef --no-rdoc --no-ri --conservative"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
	vb.name = "devbox"
	
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "16384"]
    vb.customize ["modifyvm", :id, "--cpus", 2]
	vb.customize ["modifyvm", :id, "--cpus", 2]
  end
  
  $privileged_script = <<-SHELL
   pacman -Sy --needed archlinux-keyring && pacman -Su
   pacman -Sy --noconfirm git
   git clone https://github.com/mselivanov/setup.git /tmp/setup
   find /tmp/setup -type f -name '*.sh' -exec chmod +x {} \\;
   /tmp/setup/linux/arch/configure.sh
   /tmp/setup/linux/arch/install.sh
  SHELL
  
  $unprivileged_script = <<-SHELL
   sudo chmod 644 /etc/gitconfig
   git clone https://github.com/mselivanov/setup.git ~/tmp/setup
   sudo find $HOME/tmp/setup -type f -name '*.sh' -exec chmod +x {} \\;

   if [[ -f ~/.bashrc ]]; then
     mv ~/.bashrc ~/.bashrc.bck
   fi

   if [[ -f ~/.tmux.conf ]]; then
     mv ~/.tmux.conf ~/.tmux.conf.bak
   fi

   ~/tmp/setup/linux/arch/install_unprivileged.sh
   cd ~
   rm -rf ./.dotfiles
   git clone https://github.com/mselivanov/dotfiles.git ./.dotfiles
   sudo find $HOME/.dotfiles -type f -name '*.sh' -exec chmod +x {} \\;
   cd .dotfiles && ./install.sh
  SHELL

  
  $cleanup_script = <<-SHELL
    rm -rf /tmp/setup
  SHELL

  config.vm.provision "shell", inline: $cleanup_script 
  config.vm.provision "shell", inline: $privileged_script
  config.vm.provision "shell", inline: $unprivileged_script, privileged: false

end
